function [h0,u0] = CommonIC(x,ICcase)
%**************************************************************************
%             Create initial condition (IC): h0(x), u0(x)
%
%                   Coded by Manuel Diaz 2015.12.06
%**************************************************************************
    % Domain's usefull parameters
    Lx=x(end)-x(1); xmid=0.5*(x(end)+x(1));
    % Create the selected IC
    switch ICcase
        case 1 % Uniform
            h0 = 4.0*ones(size(x));
            u0 = 2.5*ones(size(x));
        case 2 % Uniform but shallow
            h0 = 1/3*ones(size(x));
            u0 = 0.55*ones(size(x));
        case 3 % square jump
            h0 = 1+0.5*RectangularPulse(xmid-0.1,xmid+0.1,x);
            u0 = zeros(size(x));
        case 4 % Riemann profile in height
            h0 = 2*(x<xmid)+0.01*(x>=xmid);
            u0 = zeros(size(x));
        case 5 % Riemann profile in height (opposite to IC:4)
            h0 = 0.01*(x<xmid)+2*(x>=xmid);
            u0 = zeros(size(x));
        case 6 % Riemann profile in velocity
            h0 = ones(size(x));
            u0 = -1*(x<xmid)+1*(x>=xmid);
        case 7 % Riemann profile in velocity (opposite to IC:6)
            h0 = ones(size(x));
            u0 = 1*(x<xmid)-1*(x>=xmid);
        case 8 % Vacuum Riemann Problem
            h0 = 0.1*ones(size(x));
            u0 = -3*(x<xmid)+3*(x>=xmid);
        otherwise
            error('case not in the list')
    end
end % Common IC

function u = RectangularPulse(a,b,x)
    % Inputs
    % a : initial point of the jump
    % b : final point of the jump
    % x : discrete domian. E.g.: x can be generated by linspace() func.
    u = heaviside(x-a) - heaviside(x-b);
end